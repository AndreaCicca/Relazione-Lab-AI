ᐅ Quello che si vorrebbe fare
ᐅa([the, block,is, on, the, table])

a(A) = vp(R1, ASTN)
    if [R1, ASTN] = np(A)

c(C) = vp

ᐅ Noun Phrase
np([the | R1]) = n(R1)
np(R1) = n(R1)

vp([is, on | N], ASTS) = [R, on(ASTS, ASTN)]
    if [R, ASTN] = np(N)

ᐅ Noun Phrase
n([N | R]) = [R, object(C, [])]
    if noun(C, N)

n(N) = [R, object(C, [attribute(T, A)])]
    if N = [A, L | R], adj(T, A), noun(C, L) 

remove_period(['.']) = []
remove_period([X | Rest]) = [X | remove_period(Rest)]



be(is)
be(are)

ᐅ Lessico
determiner(the)

noun(block, block)
noun(cube,  block)
noun(table, table)

noun(b1, b1)      
noun(b2, b2)
noun(b3, b3)

adj(color, yellow)
adj(color, blue)
adj(color, red)
adj(size, small)
adj(size, medium) 
adj(size, large)

blocks(X) if  X = member([b1,b2,b3])
blocchi_generici(X) if noun(X, block)

size(b1) = small
size(b2) = small
size(b3) = largte

color(b1) = green
color(b2) = blue
color(b3) = red

check_properties(X, [attribute(color, COLOR)]) = true
    if color(X) = COLOR, blocks(X)

check_properties(X, [attribute(size, SIZE)]) = true
    if size(X) = SIZE, blocks(X)

find_block(Attributes) = X
    if blocks(X), check_properties(X, Attributes)


tell(KnowledgeBase, Sentence) = simplify_ast(AST)
    if SentenceWithoutPeriod = remove_period(Sentence),
       AST = a(SentenceWithoutPeriod)

simplify_ast([[],on(object(Obj,[attribute(color,COLOR)]),object(table,[]))]) = [onTable(Blocco), color(Blocco, COLOR)]
     if blocchi_generici(Obj),  blocks(Blocco), color(Blocco) = COLOR

simplify_ast([[],on(object(Obj,[attribute(size,SIZE)]),object(table,[]))]) = [onTable(Blocco), size(Blocco, SIZE)]
     if blocchi_generici(Obj),  blocks(Blocco), size(Blocco) = SIZE

simplify_ast([[],on(object(X,[attribute(color,COLOR)]),object(table,[]))]) = [onTable(X), color(X, COLOR)]

simplify_ast([[],on(object(X,[]),object(table,[]))]) = [onTable(X)]

simplify_ast([[],on(object(X,[]),object(Y,[]))]) = [on(X, Y)] if Y ≠ table

simplify_ast([[],on(object(X,[attribute(color,COLOR)]),object(Y,[]))]) = [on(X, Y), color(X, COLOR)] if Y ≠ table

simplify_ast([[],on(object(X,[]),object(Y,[attribute(color,COLOR)]))]) = [on(X, Y), color(Y, COLOR)] if Y ≠ table

simplify_ast([[],on(object(X,[attribute(color,COLORX)]),object(Y,[attribute(color,COLORY)]))]) = [on(X, Y), color(Y, COLORY), color(Y, COLORX)] if Y ≠ table


ask(KnowledgeBase, [where, is, Object, '?']) = [Object, is, on, the, table, '.']
    if member(KnowledgeBase, onTable(Object))

ask(KnowledgeBase, [what, color, is, Object, '?']) = [Object, is, Color, '.']
    if member(KnowledgeBase, color(Object, Color))

ask(KnowledgeBase, [where, is, Object2, '?']) = [Object2, is, on, Object1, '.']
    if member(KnowledgeBase, on(Object1, Object2)), Object1 ≠ Object2

ᐅ member/1
member([H | _]) = H
member([_ | R]) = member(R)

ᐅ member/2 function (verifica se una lista conrienta un elemento)
member([H | _], H) = true
member([_ | T], H) = member(T, H)