block(b1)
block(b2)
block(b3)

ᐅ trace_plan([clear(b1), onTable(b1), clear(b2), onTable(b2), empty],[on(b1, b2), empty],[],5)

grab(X, StatoIniziale, StatoFinale, Plan) = append(Plan, [grab(Stato)])
   if block(X),
    Stato = X,
    subset([empty, clear(X)],StatoIniziale),
    StatoFinaleIntermedio = append(StatoIniziale, [holding(X)]),
    StatoFinale = removeElement(StatoFinaleIntermedio, [empty])

put(X, Y, StatoIniziale, StatoFinale, Plan) = append(Plan, [put(Stato)])
    if block(X),
    block(Y),
    Y ≠ X,
    Stato = [X, Y],
    subset([holding(X), clear(Y)], StatoIniziale),
    StatoFinaleIntermedio = append(StatoIniziale, [on(X, Y), clear(X), empty]),
    StatoFinale = removeList(StatoFinaleIntermedio, [holding(X), clear(Y)])

putOnTable(X, StatoIniziale, StatoFinale, Plan) = append(Plan, [putOnTable(Stato)])
    if block(X),
    Stato = X,
    subset([holding(X)], StatoIniziale),
    StatoFinaleIntermedio = append(StatoIniziale, [onTable(X), clear(X), empty]),
    StatoFinale = removeElement(StatoFinaleIntermedio, [holding(X)])

try_action(StatoIniziale, StatoFinale, Plan)
    = putOnTable(X, StatoIniziale, StatoFinale, Plan)

try_action(StatoIniziale, StatoFinale, Plan)
    = grab(X, StatoIniziale, StatoFinale, Plan)

try_action(StatoIniziale, StatoFinale, Plan)
    = put(X, Y, StatoIniziale, StatoFinale, Plan)

trace_limit(Stato, StatoFinale, Piano, N) = Piano
    if subset(StatoFinale, Stato)

trace_limit(Stato, StatoFinale, Piano, N) = Piano2
    if N > 0,
       Piano1 = try_action(Stato, StatoNuovo, Piano),
       Piano2 = trace_limit(StatoNuovo, StatoFinale, Piano1, N-1)

trace(Stato, StatoFinale, Piano, N) = Piano
    if subset(StatoFinale, Stato)

trace(Stato, StatoFinale, Piano) = Piano2
    if Piano1 = try_action(Stato, StatoNuovo, Piano),
       Piano2 = trace(StatoNuovo, StatoFinale, Piano1)


trace_no_loop(Stato, StatoFinale, Piano, _, N) = Piano
    if subset(StatoFinale, Stato)

trace_no_loop(Stato, StatoFinale, Piano, StatiVisitati, N) = Piano2
    if N > 0,
       not_member([Stato], StatiVisitati),
       Piano1 = try_action(Stato, StatoNuovo, Piano),
       Piano2 = trace_plan(StatoNuovo, StatoFinale, Piano1, append([Stato], StatiVisitati), N-1)


not_member([], _) = true
not_member([H | T], Plan) = not_member(T, Plan)
    if not_in(H, Plan)

not_in(_, []) = true
not_in(X, [H | T]) = not_in(X, T)
    if X ≠ H

removeElement([H | T], [H]) = T
removeElement([H | T], [X]) = [H | removeElement(T, [X])]

removeList(Stato, []) = Stato
removeList(Stato, [H | T]) = removeList(removeElement(Stato, [H]), T)

ᐅ member/2 function (verifica se una lista conrienta un elemento)
member([H | _], H) = true
member([_ | T], H) = member(T, H)

ᐅ anyMember/2 function (Verifica se uno degli elementi di una lista è presente in un'altra lista)
anyMember([H | _], L) = true if member(L, H)
anyMember([_ | T], L) = anyMember(T, L)

ᐅ append/1 function 
append([], R)      = R
append([H | T], R) = [H | append(T, R)]

ᐅ length/1 function
length([])      = 0
length([_ | T]) = 1 + length(T)

ᐅ subset/2 function
subset([], _) = true
subset([H | T], S) if member(S, H), subset(T, S)

tail([H | T]) = T
head([H | T]) = H

ᐅ -/1, +/2, */2 operators
- P = not(P)      if proposition(P)
L + R = or(L, R)  if proposition(L), proposition(R)
L * R = and(L, R) if proposition(L), proposition(R)