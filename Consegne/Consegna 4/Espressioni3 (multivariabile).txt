ᐅ Somma
ᐅ poly(x,[k(0,poly(y,[k(0,poly(z,[k(0,8),k(1,6)])),k(1,3)])),k(1,3),k(2,1)])

ᐅ Da quardare: poly(y,[ k(0,4), k(1,7), k(4,9)]) + poly(y,[ k(0,4), k(1,7), k(4,9)]), non gli piace quando non comincia con x

'^'(X, Y) = poly(X, [k(Y, 1)]) if var(X), integer(Y)

'+'(VAR, Number) = poly(VAR, [k(0, Number)]) if integer(Number), var(VAR)
'+'(Number, VAR) = poly(VAR, [k(0, Number)]) if integer(Number), var(VAR)

ᐅ Caso in cui sommo un poly con una varabiule

ᐅ Aggiungere una regola per sommare un polinomio con un intero
'+'(poly(Var, Lista), Intero) = 
    poly(Var, NuovaLista) if 
        integer(Intero),
        NuovaLista = mergeSparse(Lista, [k(0, Intero)])

'+'(Intero, poly(Var, Lista)) = 
    poly(Var, NuovaLista) if 
        integer(Intero),
        NuovaLista = mergeSparse([k(0, Intero)], Lista)

'+'(X, Y) = sum(X_promoted, Y_promoted)
    if isPoly(X),
    isPoly(Y),
    X_promoted = promote(X),
    Y_promoted = promote(Y)

ᐅ caso simbolo + poly

'+'(X, poly(Var, Lista)) = 
    sum(poly(X, [k(0, 1)]), poly(Var, Lista)) if
    var(X),
    var(Var)

'+'(poly(Var, Lista), X) = 
    sum(poly(Var, Lista), poly(X, [k(0, 1)])) if
    var(X),
    var(Var)

var(x)
var(y)
var(z)

ordinePrecedenza(x, _) = true
ordinePrecedenza(y, x) = true
ordinePrecedenza(y, z) = true

order_var(x) = 1
order_var(y) = 2
order_var(z) = 3

promote(poly(x, Lista)) = poly(x, Lista)
promote(poly(y, Lista)) = poly(x, [k(0, poly(y, Lista))])
promote(poly(z, Lista)) = poly(x, [k(0, poly(y, [k(0, poly(z, Lista))]))])

isPoly(X) if X = poly(Var, Lista)


ᐅ member/1
member([H | _]) = H
member([_ | R]) = member(R)

sum(poly(Var1, Lista1), poly(Var2, Lista2)) = 
    poly(Var1, NuovaLista) if
        Var1 ≠ Var2,
        ordinePrecedenza(Var1, Var2),
        NuovaLista = [k(0, poly(Var2, Lista2)) | Lista1]

sum(poly(x, ListaX), poly(x, ListaY)) = 
    poly(x, NuovaLista) if
        NuovaLista = mergeSparseMultivar(ListaX, ListaY)

mergeSparse([], Lista) = Lista
mergeSparse(Lista, []) = Lista
mergeSparse([k(E1,C1) | T1], [k(E2,C2) | T2]) = 
    [k(E1,C1) | mergeSparse(T1, [k(E2,C2) | T2])] if E1 < E2
mergeSparse([k(E1,C1) | T1], [k(E2,C2) | T2]) = 
    [k(E2,C2) | mergeSparse([k(E1,C1) | T1], T2)] if E2 < E1
mergeSparse([k(E,C1) | T1], [k(E,C2) | T2]) = 
    [k(E,C1 + C2) | mergeSparse(T1, T2)]

mergeSparseMultivar([], Lista) = Lista
mergeSparseMultivar(Lista, []) = Lista
mergeSparseMultivar([k(E1, C1) | T1], [k(E2, C2) | T2]) = 
    [k(E1, C1) | mergeSparseMultivar(T1, [k(E2, C2) | T2])] if E1 < E2

mergeSparseMultivar([k(E1, C1) | T1], [k(E2, C2) | T2]) = 
    [k(E2, C2) | mergeSparseMultivar([k(E1, C1) | T1], T2)] if E2 < E1

mergeSparseMultivar([k(E, poly(Var, SubListaX)) | T1], [k(E, poly(Var, SubListaY)) | T2]) = 
    [k(E, poly(Var, SommaSubListe)) | mergeSparseMultivar(T1, T2)] if
        SommaSubListe = mergeSparseMultivar(SubListaX, SubListaY)

mergeSparseMultivar([k(E, C1) | T1], [k(E, C2) | T2]) = 
    [k(E, C1 + C2) | mergeSparseMultivar(T1, T2)]

ᐅ Derivata
diff(poly(x, Lista)) = 
    poly(x, ListaDerivata) if
        ListaDerivata = diffListMultivar(Lista)

diffListMultivar([]) = []
diffListMultivar([k(0, _) | T]) = diffListMultivar(T)
diffListMultivar([k(E, C) | T]) = 
    [k(E-1, C * E) | diffListMultivar(T)] if 
        E > 0,
        integer(C)
    
diffListMultivar([k(E, poly(Var, SubLista)) | T]) = 
    [k(E-1, poly(Var, SubListaDerivata)) | diffListMultivar(T)] if
        SubListaDerivata = diffListMultivar(SubLista),
        E > 0