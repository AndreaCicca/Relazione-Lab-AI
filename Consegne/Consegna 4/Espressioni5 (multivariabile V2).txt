ᐅ=========================
ᐅ VARIABILI E PRECEDENZA
ᐅ=========================

ᐅ Indichiamo le variabili ammesse.
var(x)
var(y)
var(z)

ᐅ Ordine di precedenza: x > y > z
ordinePrecedenza(x, y)
ordinePrecedenza(x, z)
ordinePrecedenza(y, z)


ᐅ=========================
ᐅ productPoly
ᐅ=========================

productPoly(poly(Var, L1), poly(Var, L2)) = poly(Var, L3)
    if L3 = productCoeffs(Var, L1, L2)

productPoly(poly(Var1, L1), poly(Var2, L2)) = poly(Var1, L3)
    if ordinePrecedenza(Var1, Var2),
       L3 = productCoeffs(Var1, L1, [k(0, poly(Var2, L2))])

productPoly(poly(Var1, L1), poly(Var2, L2)) = poly(Var2, L3)
    if ordinePrecedenza(Var2, Var1),
       L3 = productCoeffs(Var2, L2, [k(0, poly(Var1, L1))])

productCoeffs(_, [], _) = []
productCoeffs(_, _, []) = []
productCoeffs(Var, [k(E1, C1)|T1], L2) = R
    if A = multiplyTermList(E1, C1, L2),
       B = productCoeffs(Var, T1, L2),
       R = mergeCoefficients(Var, A, B)

multiplyTermList(_, _, []) = []
multiplyTermList(E1, C1, [k(E2, C2)|T2]) = [k(E, D)|T]
    if E = E1 + E2,
       D = productCoefficient(C1, C2),
       T = multiplyTermList(E1, C1, T2)

productCoefficient(C1, C2) = S
    if integer(C1),
       integer(C2),
       S = C1 * C2

productCoefficient(C1, C2) = S
    if isPoly(C1),
       isPoly(C2),
       S = productPoly(C1, C2)

productCoefficient(C1, C2) = S
    if integer(C1),
       isPoly(C2),
       V2 = polyVar(C2),
       L2 = polyCoeffs(C2),
       P1 = poly(V2, [k(0, C1)]),
       S = productPoly(P1, poly(V2, L2))

productCoefficient(C1, C2) = S
    if integer(C2),
       isPoly(C1),
       V1 = polyVar(C1),
       L1 = polyCoeffs(C1),
       P2 = poly(V1, [k(0, C2)]),
       S = productPoly(poly(V1, L1), P2)


ᐅ=========================
ᐅ sumPoly
ᐅ=========================

ᐅ Somma di due polinomi poly(Var1, L1) e poly(Var2, L2).

ᐅ Caso 1: stessa variabile esterna
sumPoly(poly(Var, L1), poly(Var, L2)) = poly(Var, Merged)
    if Var = Var,
       Merged = mergeCoefficients(Var, L1, L2)

ᐅ Caso 2: variabili esterne diverse, Var1 > Var2
sumPoly(poly(Var1, L1), poly(Var2, L2)) = poly(Var1, Merged)
    if Var1 ≠ Var2,
       ordinePrecedenza(Var1, Var2),
       ᐅ annido poly(Var2, L2) come coeff di grado 0
       Merged = mergeCoefficients(Var1, L1, [k(0, poly(Var2, L2))])

ᐅ Caso 3: variabili esterne diverse, Var2 > Var1
sumPoly(poly(Var1, L1), poly(Var2, L2)) = poly(Var2, Merged)
    if Var1 ≠ Var2,
       ordinePrecedenza(Var2, Var1),
       ᐅ annido poly(Var1, L1) come coeff di grado 0
       Merged = mergeCoefficients(Var2, L2, [k(0, poly(Var1, L1))])


ᐅ=========================
ᐅ mergeCoefficients
ᐅ=========================

ᐅ Unisce due liste di termini [k(E, C)] in ordine di esponente crescente,
ᐅ sommando i coefficienti quando E coincide.

mergeCoefficients(_, [], L2) = L2
mergeCoefficients(_, L1, []) = L1

ᐅ Caso E1 == E2 => sommiamo i coefficienti
mergeCoefficients(Var, [k(E, C1) | T1], [k(E, C2) | T2]) = [k(E, C3) | T3]
    if C3 = sumCoefficient(C1, C2),
       T3 = mergeCoefficients(Var, T1, T2)

ᐅ Caso E1 < E2
mergeCoefficients(Var, [k(E1, C1) | T1], [k(E2, C2) | T2]) = [k(E1, C1) | T3]
    if E1 < E2,
       T3 = mergeCoefficients(Var, T1, [k(E2, C2) | T2])

ᐅ Caso E2 < E1
mergeCoefficients(Var, [k(E1, C1) | T1], [k(E2, C2) | T2]) = [k(E2, C2) | T3]
    if E2 < E1,
       T3 = mergeCoefficients(Var, [k(E1, C1) | T1], T2)


ᐅ=========================
ᐅ sumCoefficient
ᐅ=========================

ᐅ Somma di due “coefficienti” C1 e C2,
ᐅ che possono essere numeri o polinomi (in qualunque Var).

ᐅ Caso A: entrambi numeri
sumCoefficient(C1, C2) = S
    if integer(C1),
       integer(C2),
       S = C1 + C2

ᐅ Caso B: entrambi polinomi
sumCoefficient(C1, C2) = S
    if isPoly(C1),
       isPoly(C2),
       S = sumPoly(C1, C2)

ᐅ Caso C: C1 intero, C2 polinomio
sumCoefficient(C1, C2) = S
    if integer(C1),
       isPoly(C2),
       VarC2 = polyVar(C2),
       CoeffsC2 = polyCoeffs(C2),
       ᐅ Converto l'intero C1 in un poly con la stessa var di C2
       PolyC1 = poly(VarC2, [k(0, C1)]),
       S = sumPoly(PolyC1, poly(VarC2, CoeffsC2))

ᐅ Caso D: C2 intero, C1 polinomio
sumCoefficient(C1, C2) = S
    if integer(C2),
       isPoly(C1),
       VarC1 = polyVar(C1),
       CoeffsC1 = polyCoeffs(C1),
       ᐅ Converto l'intero C2 in un poly con la stessa var di C1
       PolyC2 = poly(VarC1, [k(0, C2)]),
       S = sumPoly(poly(VarC1, CoeffsC1), PolyC2)


ᐅ=========================
ᐅ PREDICATI DI SUPPORTO
ᐅ=========================

ᐅ Riconosce se X è poly(_, _)
isPoly(poly(_, _))

ᐅ Estrae la variabile principale di un poly
polyVar(poly(Var, _)) = Var

ᐅ Estrae la lista dei termini k(E, C)
polyCoeffs(poly(_, CoeffList)) = CoeffList


ᐅ=========================
ᐅ Derivata
ᐅ=========================

diff(Var, poly(Var, Coeffs)) = poly(Var, Diffs)
    if Diffs = differentiateCoeffs(Var, Coeffs)

diff(Var, poly(Var2, _)) = 0
    if Var ≠ Var2

differentiateCoeffs(_, []) = []
differentiateCoeffs(Var, [k(E, C) | T]) = R
    if E > 0,
       C1 = scalarProduct(E, C),
       E1 = E - 1,
       T1 = differentiateCoeffs(Var, T),
       R = [k(E1, C1) | T1]
differentiateCoeffs(Var, [k(E, _) | T]) = R
    if E = 0,
       R = differentiateCoeffs(Var, T)

scalarProduct(_, 0) = 0
scalarProduct(N, C) = M
    if integer(C),
       M = N * C
scalarProduct(N, poly(V, Coeffs)) = poly(V, Coeffs1)
    if Coeffs1 = scalarProductCoeffs(N, Coeffs)

scalarProductCoeffs(_, []) = []
scalarProductCoeffs(N, [k(E, C) | T]) = [k(E, C1) | T1]
    if C1 = scalarProduct(N, C),
       T1 = scalarProductCoeffs(N, T)